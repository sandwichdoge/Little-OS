- Implement snprintf with va_list.

- Improve syscall, put keyboard callback funcs in a queue.
- Read up Paging.
- Detect physical memory limits.
- Detect kernel stack overflow.
- kmalloc.
- User accounts.
- Multi-tasking.

#include <stdarg.h>
#include <stdio.h>
#include <unistd.h>

char *convert(unsigned int num, int base) {
    static char Representation[] = "0123456789ABCDEF";
    static char buffer[50];
    char *ptr;

    ptr = &buffer[49];
    *ptr = '\0';

    do {
        *--ptr = Representation[num % base];
        num /= base;
    } while (num != 0);

    return (ptr);
}

void myprintf(char *format, ...) {
    char *traverse;
    unsigned int i;
    char *s;

    va_list arg;
    va_start(arg, format);

    for (traverse = format; *traverse != '\0'; traverse++) {
        while (*traverse != '%') {
            putchar(*traverse);
            traverse++;
            if (*traverse == '\0') break;
        }

        traverse++;

        // Module 2: Fetching and executing arguments
        switch (*traverse) {
            case 'c':
                i = va_arg(arg, int);  // Fetch char argument
                putchar(i);
                break;

            case 'd':
                i = va_arg(arg, int);  // Fetch Decimal/Integer argument
                if (i < 0) {
                    i = -i;
                    putchar('-');
                }
                puts(convert(i, 10));
                break;

            case 'o':
                i = va_arg(arg, unsigned int);  // Fetch Octal representation
                puts(convert(i, 8));
                break;

            case 's':
                s = va_arg(arg, char *);  // Fetch string
                puts(s);
                break;

            case 'x':
                i = va_arg(arg,
                        unsigned int);  // Fetch Hexadecimal representation
                puts(convert(i, 16));
                break;
            case '\0':
                break;
        }
    }

    // Module 3: Closing argument list to necessary clean-up
    va_end(arg);
}

int main() {
    const char *str = "World";
    myprintf("hello, %s\0", str);
    return 0;
}